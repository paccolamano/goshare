// Code generated by MockGen. DO NOT EDIT.
// Source: recover.go
//
// Generated by this command:
//
//	mockgen -source=recover.go -destination=recover_mock_test.go -package=middleware_test
//

// Package middleware_test is a generated GoMock package.
package middleware_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockErrorLogger is a mock of ErrorLogger interface.
type MockErrorLogger struct {
	ctrl     *gomock.Controller
	recorder *MockErrorLoggerMockRecorder
	isgomock struct{}
}

// MockErrorLoggerMockRecorder is the mock recorder for MockErrorLogger.
type MockErrorLoggerMockRecorder struct {
	mock *MockErrorLogger
}

// NewMockErrorLogger creates a new mock instance.
func NewMockErrorLogger(ctrl *gomock.Controller) *MockErrorLogger {
	mock := &MockErrorLogger{ctrl: ctrl}
	mock.recorder = &MockErrorLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorLogger) EXPECT() *MockErrorLoggerMockRecorder {
	return m.recorder
}

// ErrorContext mocks base method.
func (m *MockErrorLogger) ErrorContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorContext", varargs...)
}

// ErrorContext indicates an expected call of ErrorContext.
func (mr *MockErrorLoggerMockRecorder) ErrorContext(ctx, msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorContext", reflect.TypeOf((*MockErrorLogger)(nil).ErrorContext), varargs...)
}
