// Code generated by MockGen. DO NOT EDIT.
// Source: syncute.go
//
// Generated by this command:
//
//	mockgen -source=syncute.go -destination=syncute_mock_test.go -package=syncute_test
//

// Package syncute_test is a generated GoMock package.
package syncute_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDebugLogger is a mock of DebugLogger interface.
type MockDebugLogger struct {
	ctrl     *gomock.Controller
	recorder *MockDebugLoggerMockRecorder
	isgomock struct{}
}

// MockDebugLoggerMockRecorder is the mock recorder for MockDebugLogger.
type MockDebugLoggerMockRecorder struct {
	mock *MockDebugLogger
}

// NewMockDebugLogger creates a new mock instance.
func NewMockDebugLogger(ctrl *gomock.Controller) *MockDebugLogger {
	mock := &MockDebugLogger{ctrl: ctrl}
	mock.recorder = &MockDebugLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebugLogger) EXPECT() *MockDebugLoggerMockRecorder {
	return m.recorder
}

// DebugContext mocks base method.
func (m *MockDebugLogger) DebugContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugContext", varargs...)
}

// DebugContext indicates an expected call of DebugContext.
func (mr *MockDebugLoggerMockRecorder) DebugContext(ctx, msg any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugContext", reflect.TypeOf((*MockDebugLogger)(nil).DebugContext), varargs...)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockService) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockServiceMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockService)(nil).Run), ctx)
}

// Shutdown mocks base method.
func (m *MockService) Shutdown(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", ctx)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServiceMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockService)(nil).Shutdown), ctx)
}
